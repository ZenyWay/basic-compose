!function(){return function e(t,n,r){function o(u,a){if(!n[u]){if(!t[u]){var c="function"==typeof require&&require;if(!a&&c)return c(u,!0);if(i)return i(u,!0);var f=new Error("Cannot find module '"+u+"'");throw f.code="MODULE_NOT_FOUND",f}var s=n[u]={exports:{}};t[u][0].call(s.exports,function(e){var n=t[u][1][e];return o(n||e)},s,s.exports,e,t,n,r)}return n[u].exports}for(var i="function"==typeof require&&require,u=0;u<r.length;u++)o(r[u]);return o}}()({1:[function(e,t,n){"use strict";function r(e){return e-1}Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){return void 0===e&&(e=r),function t(){if(arguments.length>1)return t(arguments);var n=arguments[0];if(!n)return n;var r=typeof n.valueOf();return"function"===r||"string"===r||"number"!=typeof n.length?n:n.length<=1?n[0]:function(){for(var t=arguments.length,r=function(e,t){return t<e?t<0?0:t:e}(t,e(t)),o=new Array(t);t--;)o[t]=arguments[t];for(t=n.length;t--;)o[r]=n[t].apply(void 0,o);return o[r]}}}},{}],2:[function(e,t,n){"use strict";const r=e(1).default;function o(e){return jasmine.createSpy(`f${e}`).and.returnValue(e+1)}describe("createCompose:",function(){let e;beforeEach(function(){e=r()}),it("returns a function",function(){expect(e).toEqual(jasmine.any(Function))}),describe("compose (the returned function):",function(){describe("when called with at least two arguments, or with an array-like object of at least two entries:",function(){let t,n;beforeEach(function(){t=function(e){const t=new Array(e);let n=t.length;for(;n--;)t[n]=o(n);return t}(21),n=[]}),describe("when the `compose` factory was called without arguments:",function(){beforeEach(function(){n.push([t[1],t[0]]),e(...n[0])(0),e(n[0])(0),n.push([t[4],t[3],t[2]]),e(...n[1])(2),e(n[1])(2),n.push(t.slice(5).reverse()),e(...n[2])("foo","bar",5),e(n[2])("foo","bar",5)}),it("returns a function that sequentially calls all given functions, from last to first. all arguments to the resulting function are passed to each function as is, except the last, which is the result from the previous function call.",function(){Object.keys(t).forEach(function(e){e<5&&expect(t[e].calls.allArgs()).toEqual([[Number(e)],[Number(e)]]),e>=5&&expect(t[e].calls.allArgs()).toEqual([["foo","bar",Number(e)],["foo","bar",Number(e)]])})})}),describe("when the `compose` factory was called with an index function:",function(){let e;beforeEach(function(){e=r(function(){return 0}),n.push(t.slice(5).reverse()),e(...n[0])(5,"foo","bar"),e(n[0])(5,"foo","bar")}),it("returns a function that sequentially calls all given functions, from last to first. all arguments to the resulting function are passed to each function as is, except that at the position defined by the function given to the compose factory: that argument is the result from the previous function call.",function(){Object.keys(t).filter(function(e){return e>=5}).forEach(function(e){expect(t[e].calls.allArgs()).toEqual([[Number(e),"foo","bar"],[Number(e),"foo","bar"]])})})})}),describe("when called with no argument or an empty array-like object:",function(){const t=[];beforeEach(function(){t.push(e()),t.push(e([]))}),it("returns undefined",function(){expect(t).toEqual([void 0,void 0])})}),describe("when called with a single falsy or non array-like argument, or with a single function, or with a single string, or with a single array-like object with a single entry:",function(){const t=[void 0,null,!1,0,NaN,"","foo",function(){},Date.now(),/.*/i,{}],n=[[],[],[]];beforeEach(function(){t.forEach(function(t){n[0].push(e(t)),n[1].push(e([t]))}),n[2].push(e([["foo"]]))}),it("returns that argument or entry",function(){expect(n[0]).toEqual(t),expect(n[1]).toEqual(t),expect(n[2]).toEqual([["foo"]])})})})})},{1:1}]},{},[2]);
